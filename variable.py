import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QPushButton, QDialog, QVBoxLayout,
                           QHBoxLayout, QLabel, QLineEdit, QTextEdit, QTableWidget,
                           QTableWidgetItem, QHeaderView, QAbstractItemView, QMessageBox,
                           QWidget, QFrame)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QColor, QPalette


class VariableDialog(QDialog):
    """Dialog to manage variables with their multi-line text values"""
    
    # Signal to emit when variables are saved
    variables_saved = pyqtSignal(dict)
    
    def __init__(self, variables=None, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Variable Manager")
        self.resize(600, 500)
        
        # Define default non-editable variables
        self.default_variables = {
            "title": "Title of the video",
            "intro": "Scripts generated by intro prompt"
        }
        
        self.setStyleSheet("""
            QDialog {
                background-color: #f0f0f0;
            }
            QPushButton {
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QTableWidget {
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                alternate-background-color: #f9f9f9;
                gridline-color: #e0e0e0;
            }
            QHeaderView::section {
                background-color: #e0e0e0;
                padding: 6px;
                font-weight: bold;
                border: none;
                border-right: 1px solid #d0d0d0;
                border-bottom: 1px solid #d0d0d0;
            }
            QTextEdit, QLineEdit {
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                padding: 4px;
                background-color: white;
            }
            QFrame#line {
                background-color: #d0d0d0;
            }
        """)
        
        # Initialize with existing variables if provided
        self.variables = variables if variables is not None else {}
        
        # Add default variables if they don't exist
        for key, value in self.default_variables.items():
            if key not in self.variables:
                self.variables[key] = value
        
        # Create layout and widgets
        self.setup_ui()
        
        # Fill the table with existing variables
        self.populate_table()
    
    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Table section
        table_label = QLabel("Variables")
        table_label.setFont(QFont("Arial", 12, QFont.Bold))
        main_layout.addWidget(table_label)
        
        self.table = QTableWidget(0, 2)
        self.table.setHorizontalHeaderLabels(["Name", "Value"])
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.SingleSelection)
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.table.verticalHeader().setVisible(False)
        self.table.clicked.connect(self.load_variable)
        main_layout.addWidget(self.table)
        
        # Edit section
        edit_label = QLabel("Edit Variable")
        edit_label.setFont(QFont("Arial", 12, QFont.Bold))
        main_layout.addWidget(edit_label)
        
        # Name input
        name_layout = QHBoxLayout()
        name_label = QLabel("Name:")
        name_label.setMinimumWidth(60)
        self.name_edit = QLineEdit()
        name_layout.addWidget(name_label)
        name_layout.addWidget(self.name_edit)
        main_layout.addLayout(name_layout)
        
        # Value input
        value_layout = QVBoxLayout()
        value_label = QLabel("Value:")
        self.value_edit = QTextEdit()
        value_layout.addWidget(value_label)
        value_layout.addWidget(self.value_edit)
        main_layout.addLayout(value_layout)
        
        # Control buttons for editing
        edit_buttons = QHBoxLayout()
        self.add_button = QPushButton("Add/Update")
        self.add_button.clicked.connect(self.add_update_variable)
        self.delete_button = QPushButton("Delete")
        self.delete_button.clicked.connect(self.delete_variable)
        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_form)
        
        edit_buttons.addWidget(self.add_button)
        edit_buttons.addWidget(self.delete_button)
        edit_buttons.addWidget(self.clear_button)
        edit_buttons.addStretch()
        main_layout.addLayout(edit_buttons)
        
        # Separator line
        line = QFrame()
        line.setObjectName("line")
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        line.setMinimumHeight(2)
        main_layout.addWidget(line)
        
        # Dialog buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()
        self.save_button = QPushButton("Save")
        self.save_button.clicked.connect(self.accept)
        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.setObjectName("cancelButton")
        self.cancel_button.clicked.connect(self.reject)
        
        buttons_layout.addWidget(self.save_button)
        buttons_layout.addWidget(self.cancel_button)
        main_layout.addLayout(buttons_layout)
    
    def populate_table(self):
        """Fill the table with the current variables"""
        self.table.setRowCount(0)
        
        # First add default variables (at the top)
        for name, value in self.default_variables.items():
            row = self.table.rowCount()
            self.table.insertRow(row)
            name_item = QTableWidgetItem(name)
            name_item.setBackground(QColor("#f0f0f0"))
            self.table.setItem(row, 0, name_item)
            
            # Display a preview of the value (first line)
            preview = self.variables[name].split('\n')[0]
            if len(self.variables[name].split('\n')) > 1 or len(preview) > 30:
                preview += "..."
            
            value_item = QTableWidgetItem(preview)
            value_item.setBackground(QColor("#f0f0f0"))
            self.table.setItem(row, 1, value_item)
        
        # Then add custom variables
        for name, value in self.variables.items():
            if name not in self.default_variables:
                row = self.table.rowCount()
                self.table.insertRow(row)
                self.table.setItem(row, 0, QTableWidgetItem(name))
                
                # Display a preview of the value (first line)
                preview = value.split('\n')[0]
                if len(value.split('\n')) > 1 or len(preview) > 30:
                    preview += "..."
                self.table.setItem(row, 1, QTableWidgetItem(preview))
    
    def load_variable(self):
        """Load the selected variable into the edit form"""
        selected_row = self.table.currentRow()
        if selected_row >= 0:
            name = self.table.item(selected_row, 0).text()
            
            # Check if it's a default variable (which shouldn't be editable)
            if name in self.default_variables:
                self.name_edit.setText(name)
                self.value_edit.setText(self.variables.get(name, ""))
                
                # Disable editing for default variables
                self.name_edit.setReadOnly(True)
                self.value_edit.setReadOnly(True)
                self.add_button.setEnabled(False)
                self.delete_button.setEnabled(False)
            else:
                self.name_edit.setText(name)
                self.value_edit.setText(self.variables.get(name, ""))
                
                # Enable editing for custom variables
                self.name_edit.setReadOnly(False)
                self.value_edit.setReadOnly(False)
                self.add_button.setEnabled(True)
                self.delete_button.setEnabled(True)
    
    def add_update_variable(self):
        """Add a new variable or update an existing one"""
        name = self.name_edit.text().strip()
        value = self.value_edit.toPlainText()
        
        if not name:
            QMessageBox.warning(self, "Error", "Variable name cannot be empty")
            return
        
        # Prevent adding/updating default variables
        if name in self.default_variables:
            QMessageBox.warning(self, "Error", f"Cannot modify default variable '{name}'")
            return
        
        self.variables[name] = value
        self.populate_table()
        self.clear_form()
    
    def delete_variable(self):
        """Delete the current variable"""
        name = self.name_edit.text().strip()
        
        # Prevent deleting default variables
        if name in self.default_variables:
            QMessageBox.warning(self, "Error", f"Cannot delete default variable '{name}'")
            return
        
        if name in self.variables:
            del self.variables[name]
            self.populate_table()
            self.clear_form()
    
    def clear_form(self):
        """Clear the edit form"""
        self.name_edit.clear()
        self.value_edit.clear()
        
        # Reset form state
        self.name_edit.setReadOnly(False)
        self.value_edit.setReadOnly(False)
        self.add_button.setEnabled(True)
        self.delete_button.setEnabled(True)
    
    def accept(self):
        """Override accept to emit the signal with variables data"""
        self.variables_saved.emit(self.variables)
        super().accept()


class MainWindow(QMainWindow):
    """Main window of the application"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Variable Manager App")
        self.setMinimumSize(400, 300)
        
        # Initialize with default variables
        self.variables = {
            "title": "Title of the video",
            "intro": "Scripts generated by intro prompt"
        }  
        
        # Set up the central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(20)
        
        # Title and description
        title = QLabel("Variable Manager")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 18, QFont.Bold))
        
        description = QLabel("Manage variables with multi-line text values")
        description.setAlignment(Qt.AlignCenter)
        description.setFont(QFont("Arial", 10))
        
        # Open dialog button
        self.open_dialog_btn = QPushButton("Manage Variables")
        self.open_dialog_btn.setFont(QFont("Arial", 12))
        self.open_dialog_btn.setMinimumHeight(50)
        self.open_dialog_btn.clicked.connect(self.open_variable_dialog)
        
        # Status label to show saved variables
        self.status_label = QLabel("No variables defined yet")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666;")
        
        # Add widgets to layout
        layout.addStretch()
        layout.addWidget(title)
        layout.addWidget(description)
        layout.addSpacing(20)
        layout.addWidget(self.open_dialog_btn)
        layout.addWidget(self.status_label)
        layout.addStretch()
        
        # Apply styles
        self.apply_styles()
    
    def apply_styles(self):
        """Apply custom styles to the application"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QPushButton {
                background-color: #4a86e8;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #3a76d8;
            }
            QLabel {
                color: #333333;
            }
        """)
    
    def open_variable_dialog(self):
        """Open the variable management dialog"""
        dialog = VariableDialog(self.variables, self)
        dialog.variables_saved.connect(self.handle_variables_saved)
        
        # Show dialog and process result
        if dialog.exec_() == QDialog.Accepted:
            # Variables are handled through signal
            pass
    
    def handle_variables_saved(self, variables):
        """Handle the variables saved from dialog"""
        self.variables = variables
        
        # Update status label
        if self.variables:
            count = len(self.variables)
            self.status_label.setText(f"{count} variable{'s' if count > 1 else ''} defined")
        else:
            self.status_label.setText("No variables defined yet")
        
        # This is where you could emit a signal with the variables
        # or perform any other action with the updated variables
        print("Variables updated:", self.variables)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # Set global application font
    app.setFont(QFont("Arial", 10))
    
    # Create and show the main window
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec_())